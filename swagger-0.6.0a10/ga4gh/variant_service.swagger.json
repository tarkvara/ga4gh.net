{
  "swagger": "2.0",
  "info": {
    "title": "ga4gh/variant_service.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v0.6.0a10/callsets/search": {
      "post": {
        "summary": "Gets a list of call sets matching the search criteria.",
        "description": "`POST /callsets/search` must accept a JSON version of\n`SearchCallSetsRequest` as the post body and will return a JSON version of\n`SearchCallSetsResponse`.",
        "operationId": "SearchCallSets",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ga4ghSearchCallSetsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ga4ghSearchCallSetsRequest"
            }
          }
        ],
        "tags": [
          "VariantService"
        ]
      }
    },
    "/v0.6.0a10/callsets/{call_set_id}": {
      "get": {
        "summary": "Gets a `CallSet` by ID.",
        "description": "`GET /callsets/{id}` will return a JSON version of `CallSet`.",
        "operationId": "GetCallSet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ga4ghCallSet"
            }
          }
        },
        "parameters": [
          {
            "name": "call_set_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "VariantService"
        ]
      }
    },
    "/v0.6.0a10/variants/search": {
      "post": {
        "summary": "Gets a list of `Variant` matching the search criteria.",
        "description": "`POST /variants/search` must accept a JSON version of\n`SearchVariantsRequest` as the post body and will return a JSON version of\n`SearchVariantsResponse`.",
        "operationId": "SearchVariants",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ga4ghSearchVariantsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ga4ghSearchVariantsRequest"
            }
          }
        ],
        "tags": [
          "VariantService"
        ]
      }
    },
    "/v0.6.0a10/variants/{variant_id}": {
      "post": {
        "summary": "Gets a `Variant` by ID.",
        "description": "`GET /variants/{id}` will return a JSON version of `Variant`.",
        "operationId": "GetVariant",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ga4ghVariant"
            }
          }
        },
        "parameters": [
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "VariantService"
        ]
      }
    },
    "/v0.6.0a10/variantsets/search": {
      "post": {
        "summary": "Gets a list of `VariantSet` matching the search criteria.",
        "description": "`POST /variantsets/search` must accept a JSON version of\n`SearchVariantSetsRequest` as the post body and will return a JSON version\nof `SearchVariantSetsResponse`.",
        "operationId": "SearchVariantSets",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ga4ghSearchVariantSetsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ga4ghSearchVariantSetsRequest"
            }
          }
        ],
        "tags": [
          "VariantService"
        ]
      }
    },
    "/v0.6.0a10/variantsets/{variant_set_id}": {
      "get": {
        "summary": "Gets a `VariantSet` by ID.",
        "description": "`GET /variantsets/{variant_set_id}` will return a JSON version of\n`VariantSet`.",
        "operationId": "GetVariantSet",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ga4ghVariantSet"
            }
          }
        },
        "parameters": [
          {
            "name": "variant_set_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "VariantService"
        ]
      }
    }
  },
  "definitions": {
    "ga4ghAnalysis": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Formats of id | name | description | accessions are described in the\ndocumentation on general attributes and formats."
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "description": "The time at which this record was created, in ISO 8601 format."
        },
        "updated": {
          "type": "string",
          "description": "The time at which this record was last updated, in ISO 8601 format."
        },
        "type": {
          "type": "string",
          "description": "The type of analysis."
        },
        "software": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The software run to generate this analysis."
        },
        "attributes": {
          "$ref": "#/definitions/ga4ghAttributes",
          "description": "A map of additional analysis information."
        }
      },
      "description": "An analysis contains an interpretation of one or several experiments. (e.g.\nSNVs, copy number variations, methylation status) together with information\nabout the methodology used."
    },
    "ga4ghAttributeValue": {
      "type": "object",
      "properties": {
        "string_value": {
          "type": "string"
        },
        "int64_value": {
          "type": "string",
          "format": "int64"
        },
        "int32_value": {
          "type": "integer",
          "format": "int32"
        },
        "bool_value": {
          "type": "boolean",
          "format": "boolean"
        },
        "double_value": {
          "type": "number",
          "format": "double"
        },
        "external_identifier": {
          "$ref": "#/definitions/ga4ghExternalIdentifier"
        },
        "ontology_term": {
          "$ref": "#/definitions/ga4ghOntologyTerm"
        },
        "experiment": {
          "$ref": "#/definitions/ga4ghExperiment"
        },
        "program": {
          "$ref": "#/definitions/ga4ghProgram"
        },
        "analysis": {
          "$ref": "#/definitions/ga4ghAnalysis"
        },
        "null_value": {
          "$ref": "#/definitions/ga4ghNullValue"
        },
        "attributes": {
          "$ref": "#/definitions/ga4ghAttributes"
        },
        "attribute_list": {
          "$ref": "#/definitions/ga4ghAttributeValueList"
        }
      },
      "description": "Type defining a collection of attributes associated with various protocol\nrecords. Each attribute is a name that maps to an array of one or more\nvalues. Values are chosen from both internal protobuf types and GA4GH.\n Values should be split into array elements instead of using a separator\nsyntax that needs to parsed."
    },
    "ga4ghAttributeValueList": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4ghAttributeValue"
          }
        }
      }
    },
    "ga4ghAttributes": {
      "type": "object",
      "properties": {
        "attr": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ga4ghAttributeValueList"
          }
        }
      }
    },
    "ga4ghCall": {
      "type": "object",
      "properties": {
        "call_set_name": {
          "type": "string",
          "description": "The name of the call set this variant call belongs to.\nIf this field is not present, the ordering of the call sets from a\n`SearchCallSetsRequest` over this `VariantSet` is guaranteed to match\nthe ordering of the calls on this `Variant`.\nThe number of results will also be the same."
        },
        "call_set_id": {
          "type": "string",
          "description": "The ID of the call set this variant call belongs to.\n\nIf this field is not present, the ordering of the call sets from a\n`SearchCallSetsRequest` over this `VariantSet` is guaranteed to match\nthe ordering of the calls on this `Variant`.\nThe number of results will also be the same."
        },
        "genotype": {
          "$ref": "#/definitions/protobufListValue",
          "description": "The genotype of this variant call.\n\nA 0 value represents the reference allele of the associated `Variant`. Any\nother value is a 1-based index into the alternate alleles of the associated\n`Variant`.\n\nIf a variant had a referenceBases field of \"T\", an alternateBases\nvalue of [\"A\", \"C\"], and the genotype was [2, 1], that would mean the call\nrepresented the heterozygous value \"CA\" for this variant. If the genotype\nwas instead [0, 1] the represented value would be \"TA\". Ordering of the\ngenotype values is important if the phaseset field is present.\nMissing genotype genotypes may be indicated using the \"dot annotation\" [\".\", \".\"],\nas specified in VCF4.2; this is e.g. used for types of structural variants."
        },
        "phaseset": {
          "type": "string",
          "description": "If this field is populated, this variant call's genotype ordering implies\nthe phase of the bases and is consistent with any other variant calls on\nthe same contig which have the same phaseset string."
        },
        "genotype_likelihood": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          },
          "description": "The genotype likelihoods for this variant call. Each array entry\nrepresents how likely a specific genotype is for this call as\nlog10(P(data | genotype)), analogous to the GL tag in the VCF spec. The\nvalue ordering is defined by the GL tag in the VCF spec."
        },
        "attributes": {
          "$ref": "#/definitions/ga4ghAttributes",
          "description": "A map of additional information about the Call."
        }
      },
      "description": "A `Call` represents the determination of genotype with respect to a\nparticular `Variant`.\n\nIt may include associated information such as quality\nand phasing. For example, a call might assign a probability of 0.32 to\nthe occurrence of a SNP named rs1234 in a call set with the name NA12345."
    },
    "ga4ghCallSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The call set ID."
        },
        "name": {
          "type": "string",
          "description": "The call set name."
        },
        "biosample_id": {
          "type": "string",
          "description": "The Biosample the call set data was generated from."
        },
        "variant_set_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The IDs of the variant sets this call set has calls in."
        },
        "created": {
          "type": "string",
          "format": "int64",
          "description": "The date this call set was created in milliseconds from the epoch."
        },
        "updated": {
          "type": "string",
          "format": "int64",
          "description": "The time at which this call set was last updated in\nmilliseconds from the epoch."
        },
        "attributes": {
          "$ref": "#/definitions/ga4ghAttributes",
          "description": "A map of additional information about the Call Set."
        }
      },
      "description": "A CallSet is a collection of calls that were generated by the same analysis\nof the same sample."
    },
    "ga4ghExperiment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The experiment ID"
        },
        "name": {
          "type": "string",
          "description": "The name of the experiment."
        },
        "description": {
          "type": "string",
          "description": "A description of the experiment."
        },
        "message_create_time": {
          "type": "string",
          "title": "The time at which this message was created.\nFormat: ISO 8601, YYYY-MM-DDTHH:MM:SS.SSS (e.g. 2015-02-10T00:03:42.123Z)"
        },
        "message_update_time": {
          "type": "string",
          "title": "The time at which this message was last updated.\nFormat: ISO 8601, YYYY-MM-DDTHH:MM:SS.SSS (e.g. 2015-02-10T00:03:42.123Z)"
        },
        "run_time": {
          "type": "string",
          "title": "The time at which this experiment was performed.\nGranularity here is variable (e.g. date only).\nFormat: ISO 8601, YYYY-MM-DDTHH:MM:SS (e.g. 2015-02-10T00:03:42)"
        },
        "molecule": {
          "type": "string",
          "title": "The molecule examined in this experiment. (e.g. genomics DNA, total RNA)"
        },
        "strategy": {
          "type": "string",
          "title": "The experiment technique or strategy applied to the sample.\n(e.g. whole genome sequencing, RNA-seq, RIP-seq)"
        },
        "selection": {
          "type": "string",
          "title": "The method used to enrich the target. (e.g. immunoprecipitation, size\nfractionation, MNase digestion)"
        },
        "library": {
          "type": "string",
          "description": "The name of the library used as part of this experiment."
        },
        "library_layout": {
          "type": "string",
          "description": "The configuration of sequenced reads. (e.g. Single or Paired)."
        },
        "instrument_model": {
          "type": "string",
          "description": "The instrument model used as part of this experiment.\nThis maps to sequencing technology in BAM."
        },
        "instrument_data_file": {
          "type": "string",
          "title": "The data file generated by the instrument.\nTODO: This isn't actually a file is it?\nShould this be `instrumentData` instead?"
        },
        "sequencing_center": {
          "type": "string",
          "description": "The sequencing center used as part of this experiment."
        },
        "platform_unit": {
          "type": "string",
          "description": "The platform unit used as part of this experiment. This is a\nflowcell-barcode\nor slide unique identifier."
        },
        "attributes": {
          "$ref": "#/definitions/ga4ghAttributes",
          "description": "A map of additional experiment information."
        }
      },
      "description": "An experimental preparation of a sample."
    },
    "ga4ghExternalIdentifier": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string",
          "description": "The source of the identifier, e.g. `Ensembl`."
        },
        "identifier": {
          "type": "string",
          "description": "The ID defined by the external database, e.g. `ENST00000000000`."
        },
        "version": {
          "type": "string",
          "description": "The version of the object or the database, e.g. `78`."
        }
      },
      "title": "Identifier from a public database"
    },
    "ga4ghGetCallSetRequest": {
      "type": "object",
      "properties": {
        "call_set_id": {
          "type": "string",
          "description": "The ID of the `CallSet` to be retrieved."
        }
      },
      "description": "This request maps to the URL `GET /callsets/{call_set_id}`."
    },
    "ga4ghGetVariantRequest": {
      "type": "object",
      "properties": {
        "variant_id": {
          "type": "string",
          "description": "The ID of the `Variant` to be retrieved."
        }
      },
      "description": "This request maps to the URL `GET /variants/{id}`."
    },
    "ga4ghGetVariantSetRequest": {
      "type": "object",
      "properties": {
        "variant_set_id": {
          "type": "string",
          "description": "The ID of the `VariantSet` to be retrieved."
        }
      },
      "description": "This request maps to the URL `GET /variantsets/{id}`."
    },
    "ga4ghNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": " - NULL_VALUE: Null value."
    },
    "ga4ghOntologyTerm": {
      "type": "object",
      "properties": {
        "term_id": {
          "type": "string",
          "description": "Ontology term identifier - the CURIE for an ontology term. It\ndiffers from the standard GA4GH schema's :ref:`id \u003capidesign_object_ids\u003e`\nin that it is a CURIE pointing to an information resource outside of the\nscope of the schema or its resource implementation."
        },
        "term": {
          "type": "string",
          "description": "Ontology term - the label of the ontology term the termId is pointing to."
        }
      },
      "title": "An ontology term describing an attribute. (e.g. the phenotype attribute\n'polydactyly' from HPO)"
    },
    "ga4ghProgram": {
      "type": "object",
      "properties": {
        "command_line": {
          "type": "string",
          "description": "The command line used to run this program."
        },
        "id": {
          "type": "string",
          "description": "The user specified ID of the program."
        },
        "name": {
          "type": "string",
          "description": "The name of the program."
        },
        "prev_program_id": {
          "type": "string",
          "description": "The ID of the program run before this one."
        },
        "version": {
          "type": "string",
          "description": "The version of the program run."
        }
      },
      "description": "A Program describes software used in data processing or analysis."
    },
    "ga4ghSearchCallSetsRequest": {
      "type": "object",
      "properties": {
        "variant_set_id": {
          "type": "string",
          "description": "The VariantSet to search."
        },
        "name": {
          "type": "string",
          "description": "Only return call sets with this name (case-sensitive, exact match)."
        },
        "biosample_id": {
          "type": "string",
          "description": "Return only call sets generated from the provided Biosample ID."
        },
        "page_size": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the maximum number of results to return in a single page.\nIf unspecified, a system default will be used."
        },
        "page_token": {
          "type": "string",
          "description": "The continuation token, which is used to page through large result sets.\nTo get the next page of results, set this parameter to the value of\n`next_page_token` from the previous response."
        }
      },
      "description": "******************  /callsets  *********************\nThis request maps to the body of `POST /callsets/search` as JSON."
    },
    "ga4ghSearchCallSetsResponse": {
      "type": "object",
      "properties": {
        "call_sets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4ghCallSet"
          },
          "description": "The list of matching call sets."
        },
        "next_page_token": {
          "type": "string",
          "description": "The continuation token, which is used to page through large result sets.\nProvide this value in a subsequent request to return the next page of\nresults. This field will be empty if there aren't any additional results."
        }
      },
      "description": "This is the response from `POST /callsets/search` expressed as JSON."
    },
    "ga4ghSearchVariantSetsRequest": {
      "type": "object",
      "properties": {
        "dataset_id": {
          "type": "string",
          "description": "The `Dataset` to search."
        },
        "page_size": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the maximum number of results to return in a single page.\nIf unspecified, a system default will be used."
        },
        "page_token": {
          "type": "string",
          "description": "The continuation token, which is used to page through large result sets. To\nget the next page of results, set this parameter to the value of\n`next_page_token` from the previous response."
        }
      },
      "description": "******************  /variantsets  *********************\nThis request maps to the body of `POST /variantsets/search` as JSON."
    },
    "ga4ghSearchVariantSetsResponse": {
      "type": "object",
      "properties": {
        "variant_sets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4ghVariantSet"
          },
          "description": "The list of matching variant sets."
        },
        "next_page_token": {
          "type": "string",
          "description": "The continuation token, which is used to page through large result sets.\nProvide this value in a subsequent request to return the next page of\nresults. This field will be empty if there aren't any additional results."
        }
      },
      "description": "This is the response from `POST /variantsets/search` expressed as JSON."
    },
    "ga4ghSearchVariantsRequest": {
      "type": "object",
      "properties": {
        "variant_set_id": {
          "type": "string",
          "description": "The `VariantSet` to search."
        },
        "call_set_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Only return variant calls which belong to call sets with these IDs.\nIf unspecified, return all variants and no variant call objects."
        },
        "reference_name": {
          "type": "string",
          "description": "Required. Only return variants on this reference."
        },
        "start": {
          "type": "string",
          "format": "int64",
          "description": "Required. The beginning of the window (0-based, inclusive) for\nwhich overlapping variants should be returned.\nGenomic positions are non-negative integers less than reference length.\nRequests spanning the join of circular genomes are represented as\ntwo requests one on each side of the join (position 0)."
        },
        "end": {
          "type": "string",
          "format": "int64",
          "description": "Required. The end of the window (0-based, exclusive) for which overlapping\nvariants should be returned."
        },
        "page_size": {
          "type": "integer",
          "format": "int32",
          "description": "Specifies the maximum number of results to return in a single page.\nIf unspecified, a system default will be used."
        },
        "page_token": {
          "type": "string",
          "description": "The continuation token, which is used to page through large result sets.\nTo get the next page of results, set this parameter to the value of\n`next_page_token` from the previous response."
        }
      },
      "description": "******************  /variants  *********************\nThis request maps to the body of `POST /variants/search` as JSON."
    },
    "ga4ghSearchVariantsResponse": {
      "type": "object",
      "properties": {
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4ghVariant"
          },
          "description": "The list of matching variants.\nIf the `callSetId` field on the returned calls is not present,\nthe ordering of the call sets from a `SearchCallSetsRequest`\nover the parent `VariantSet` is guaranteed to match the ordering\nof the calls on each `Variant`. The number of results will also be\nthe same."
        },
        "next_page_token": {
          "type": "string",
          "description": "The continuation token, which is used to page through large result sets.\nProvide this value in a subsequent request to return the next page of\nresults. This field will be empty if there aren't any additional results."
        }
      },
      "description": "This is the response from `POST /variants/search` expressed as JSON."
    },
    "ga4ghVariant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The variant ID."
        },
        "variant_set_id": {
          "type": "string",
          "description": "The ID of the `VariantSet` this variant belongs to. This transitively\ndefines\nthe `ReferenceSet` against which the `Variant` is to be interpreted."
        },
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Names for the variant, for example a RefSNP ID."
        },
        "created": {
          "type": "string",
          "format": "int64",
          "description": "The date this variant was created in milliseconds from the epoch."
        },
        "updated": {
          "type": "string",
          "format": "int64",
          "description": "The time at which this variant was last updated in\nmilliseconds from the epoch."
        },
        "reference_name": {
          "type": "string",
          "title": "The reference on which this variant occurs.\n(e.g. `chr20` or `X`)"
        },
        "start": {
          "type": "string",
          "format": "int64",
          "description": "The start position at which this variant occurs (0-based).\nThis corresponds to the first base of the string of reference bases.\nGenomic positions are non-negative integers less than reference length.\nVariants spanning the join of circular genomes are represented as\ntwo variants one on each side of the join (position 0)."
        },
        "end": {
          "type": "string",
          "format": "int64",
          "description": "The end position (exclusive), resulting in [start, end) closed-open\ninterval.\nThis is typically calculated by `start + referenceBases.length`."
        },
        "reference_bases": {
          "type": "string",
          "description": "The reference bases for this variant. They start at the given start\nposition."
        },
        "alternate_bases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The bases that appear instead of the reference bases. Multiple alternate\nalleles are possible."
        },
        "attributes": {
          "$ref": "#/definitions/ga4ghAttributes",
          "description": "A map of additional information about the Variant."
        },
        "calls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4ghCall"
          },
          "description": "The variant calls for this particular variant. Each one represents the\ndetermination of genotype with respect to this variant. `Call`s in this\narray are implicitly associated with this `Variant`."
        },
        "variant_type": {
          "type": "string",
          "title": "The \"variant_type\" is used to denote e.g. structural variants.\nExamples:\n  DUP  : duplication of sequence following \"start\"; not necessarily in situ\n  DEL  : deletion of sequence following \"start\""
        },
        "svlen": {
          "type": "string",
          "format": "int64",
          "title": "Length of the - if labeled as such in variant_type - structural variation.\nBased on the use in VCFv4.2"
        },
        "cipos": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "title": "In the case of structural variants, start and end of the variant may not\nbe known with an exact base position. \"cipos\" provides an interval with\nhigh confidence for the start position. The interval is provided by 0 or\n2 signed integers which are added to the start position.\nBased on the use in VCFv4.2\nExample:\n  [ -12000, 1000 ]"
        },
        "ciend": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "title": "Similar to \"cipos\", but for the variant's end position (which is derived\nfrom start + svlen).\nExample:\n  [ -1000, 0 ]"
        },
        "filters_applied": {
          "type": "boolean",
          "format": "boolean",
          "description": "True if filters were applied for this variant. VCF column 7 \"FILTER\"\nany value other than the missing value."
        },
        "filters_passed": {
          "type": "boolean",
          "format": "boolean",
          "description": "True if all filters for this variant passed. VCF column 7 \"FILTER\"\nvalue PASS."
        },
        "filters_failed": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Zero or more filters that failed for this variant. VCF column 7 \"FILTER\"\nshared across all alleles in the same VCF record."
        }
      },
      "description": "A `Variant` represents a change in DNA sequence relative to some reference.\nFor example, a variant could represent a SNP or an insertion.\nVariants belong to a `VariantSet`.\nThis is equivalent to a row in VCF."
    },
    "ga4ghVariantSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The variant set ID."
        },
        "name": {
          "type": "string",
          "description": "The variant set name."
        },
        "dataset_id": {
          "type": "string",
          "description": "The ID of the dataset this variant set belongs to."
        },
        "reference_set_id": {
          "type": "string",
          "description": "The ID of the reference set that describes the sequences used by the\nvariants in this set."
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ga4ghVariantSetMetadata"
          },
          "description": "Optional metadata associated with this variant set.\nThis array can be used to store information about the variant set, such as\ninformation found in VCF header fields, that isn't already available in\nfirst class fields such as \"name\"."
        }
      },
      "description": "A VariantSet is a collection of variants and variant calls intended to be\nanalyzed together."
    },
    "ga4ghVariantSetMetadata": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The top-level key."
        },
        "value": {
          "type": "string",
          "description": "The value field for simple metadata."
        },
        "id": {
          "type": "string",
          "title": "User-provided ID field, not enforced by this API.\nTwo or more pieces of structured metadata with identical\nid and key fields are considered equivalent.\nFIXME: If it's not enforced, then why can't it be null?"
        },
        "type": {
          "type": "string",
          "description": "The type of data."
        },
        "number": {
          "type": "string",
          "description": "The number of values that can be included in a field described by this\nmetadata."
        },
        "description": {
          "type": "string",
          "description": "A textual description of this metadata."
        },
        "attributes": {
          "$ref": "#/definitions/ga4ghAttributes",
          "description": "A map of additional information about the metadata record."
        }
      },
      "description": "This metadata represents VCF header information."
    },
    "googleprotobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "protobufListValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Repeated field of dynamically typed values."
        }
      },
      "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array."
    },
    "protobufStruct": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufValue"
          },
          "description": "Unordered map of dynamically typed values."
        }
      },
      "description": "`Struct` represents a structured data value, consisting of fields\nwhich map to dynamically typed values. In some languages, `Struct`\nmight be supported by a native representation. For example, in\nscripting languages like JS a struct is represented as an\nobject. The details of that representation are described together\nwith the proto support for the language.\n\nThe JSON representation for `Struct` is JSON object."
    },
    "protobufValue": {
      "type": "object",
      "properties": {
        "null_value": {
          "$ref": "#/definitions/googleprotobufNullValue",
          "description": "Represents a null value."
        },
        "number_value": {
          "type": "number",
          "format": "double",
          "description": "Represents a double value."
        },
        "string_value": {
          "type": "string",
          "description": "Represents a string value."
        },
        "bool_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "Represents a boolean value."
        },
        "struct_value": {
          "$ref": "#/definitions/protobufStruct",
          "description": "Represents a structured value."
        },
        "list_value": {
          "$ref": "#/definitions/protobufListValue",
          "description": "Represents a repeated `Value`."
        }
      },
      "description": "`Value` represents a dynamically typed value which can be either\nnull, a number, a string, a boolean, a recursive struct value, or a\nlist of values. A producer of value is expected to set one of that\nvariants, absence of any variant indicates an error.\n\nThe JSON representation for `Value` is JSON value."
    }
  }
}
